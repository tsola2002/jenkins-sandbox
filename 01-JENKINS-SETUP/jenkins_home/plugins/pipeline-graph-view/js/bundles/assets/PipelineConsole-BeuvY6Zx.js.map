{"version":3,"mappings":"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","names":["Dropdown","items","visible","useState","show","setVisible","jsx","Tooltip","hide","DefaultDropdownProps","index","isValidElement","jsxs","children","container","createPortal","mainViewVisibility","stageViewPosition","setStageViewPosition","isMobile","useLayoutPreferences","e","setMainViewVisibility","handlePositionChange","Fragment","ViewIcon","MainViewVisibility","handleViewChange","StageViewPosition","disabled","visibleStatuses","resetStatuses","allVisible","useFilter","statuses","Result","toggleStatus","item","classNames","DataTreeView","setSearch","search","handleSelect","nodeId","event","onNodeSelect","TreeNode","stage","memo","selected","hasChildren","isSelected","hasSelectedDescendant","child","handleToggleClick","useEffect","setIsExpanded","filterStageTree","isExpanded","StatusIcon","onSelect","filteredChildren","POLL_INTERVAL","openStage","setOpenStage","userManuallySetNode","setUserManuallySetNode","stepsRef","useRef","updateStepConsoleOffset","stepId","forceUpdate","stepBuffers","stepBuffer","response","getConsoleTextOffset","startByte","newLogLines","setStepBuffers","prev","parseUrlParams","useCallback","steps","params","expanded","step","LOG_FETCH_SIZE","selectedStep","stepResult","selectedStepResult","getRunSteps","setSteps","defaultStep","data","run","error","lastStep","setExpandedSteps","newlyExpandedSteps","expandedSteps","id","onMoreConsoleClick","stageId","getStageStepBuffers","buffers","findStage","getStageSteps","handleStageSelect","onStepToggle","polling","getStateUpdateFn","checkComplete","resolve","ConsoleLogStream","lazy","__vitePreload","fetchData","consoleBuildOutput","getConsoleBuildOutput","NoStageStepsFallback","setLogBuffer","err","logBuffer","ScrollToTopBottom","isScrollable","updateScrollState","scrollTop","docHeight","atTop","atBottom","windowHeight","scrollable","setIsAtTop","setIsAtBottom","setIsScrollable","distanceFromBottom","offset","observer","scrollToBottom","scrollToTop","isAtTop","setStageViewWidth","setStageViewHeight","treeViewWidth","stageViewWidth","stageViewHeight","props","isDragging","setIsDragging","isVertical","direction","initialSize","storageKey","panelSize","setPanelSize","dividerRef"],"ignoreList":[],"sources":["../../../../frontend/common/components/dropdown.tsx","../../../../frontend/common/components/dropdown-portal.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/skeleton.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/stages-customization.tsx","../../../../frontend/common/components/filter.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsoleModel.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/hooks/use-steps-poller.ts","../../../../frontend/pipeline-console-view/pipeline-console/main/NoStageStepsFallback.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/scroll-to-top-bottom.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/split-view.tsx"],"sourcesContent":["import Tippy, { TippyProps } from \"@tippyjs/react\";\nimport { isValidElement, ReactElement, ReactNode, useState } from \"react\";\n\nimport Tooltip from \"./tooltip.tsx\";\n\n/**\n * A customized (and customizable) implementation of Tippy dropdowns\n */\nexport default function Dropdown({\n  items,\n  disabled,\n  className,\n}: DropdownProps) {\n  const [visible, setVisible] = useState(false);\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"More actions\"}>\n      <Tippy\n        visible={visible}\n        onClickOutside={hide}\n        {...DefaultDropdownProps}\n        content={\n          <div className=\"jenkins-dropdown\">\n            {items.map((item, index) => {\n              if (item === \"separator\") {\n                return (\n                  <div\n                    key={`separator-${index}`}\n                    className=\"jenkins-dropdown__separator\"\n                  />\n                );\n              }\n\n              if (isValidElement(item)) {\n                return (\n                  <div key={index} className=\"jenkins-dropdown__custom-item\">\n                    {item}\n                  </div>\n                );\n              }\n\n              const dropdownItem = item as DropdownItem;\n              return (\n                <a\n                  key={index}\n                  className=\"jenkins-dropdown__item\"\n                  href={dropdownItem.href}\n                  target={dropdownItem.target}\n                  download={dropdownItem.download}\n                >\n                  <div className=\"jenkins-dropdown__item__icon\">\n                    {dropdownItem.icon}\n                  </div>\n                  {dropdownItem.text}\n                </a>\n              );\n            })}\n          </div>\n        }\n      >\n        <button\n          className={\"jenkins-button \" + className}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n        >\n          <div className=\"jenkins-overflow-button__ellipsis\">\n            <span />\n            <span />\n            <span />\n          </div>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\nexport const DefaultDropdownProps: TippyProps = {\n  theme: \"dropdown\",\n  duration: 250,\n  touch: true,\n  animation: \"dropdown\",\n  interactive: true,\n  offset: [0, 0],\n  placement: \"bottom-start\",\n  arrow: false,\n};\n\ninterface DropdownProps {\n  items: (DropdownItem | ReactElement | \"separator\")[];\n  disabled?: boolean;\n  className?: string;\n}\n\ninterface DropdownItem {\n  text: string;\n  href?: string;\n  icon: ReactNode;\n  target?: string;\n  download?: string;\n}\n","import { ReactNode } from \"react\";\nimport { createPortal } from \"react-dom\";\n\ninterface DropdownPortalProps {\n  children: ReactNode;\n}\n\nexport default function DropdownPortal({ children }: DropdownPortalProps) {\n  const container = document.getElementById(\"console-pipeline-overflow-root\");\n\n  if (!container) {\n    console.error(\"DropdownPortal: Target container not found!\");\n    return null;\n  }\n\n  return createPortal(children, container);\n}\n","import \"./skeleton.scss\";\n\nexport default function Skeleton({ height }: { height?: number }) {\n  return (\n    <div\n      className={\"pgv-skeleton\"}\n      style={\n        height\n          ? {\n              height: `${height}rem`,\n            }\n          : {}\n      }\n    />\n  );\n}\n","import \"./stages-customization.scss\";\n\nimport { ChangeEvent } from \"react\";\n\nimport {\n  MainViewVisibility,\n  StageViewPosition,\n  useLayoutPreferences,\n} from \"../providers/user-preference-provider.tsx\";\n\nexport default function StagesCustomization() {\n  const {\n    mainViewVisibility,\n    setMainViewVisibility,\n    stageViewPosition,\n    setStageViewPosition,\n    isMobile,\n  } = useLayoutPreferences();\n\n  if (isMobile) {\n    return null;\n  }\n\n  const handleViewChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setMainViewVisibility(e.target.value as MainViewVisibility);\n  };\n\n  const handlePositionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setStageViewPosition(e.target.value as StageViewPosition);\n  };\n\n  return (\n    <>\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"main-view-visibility\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <ViewIcon\n            mainViewVisibility={mainViewVisibility}\n            stageViewPosition={stageViewPosition}\n          />\n        </div>\n        Views\n        <span>\n          {mainViewVisibility === MainViewVisibility.BOTH && \"Graph and stages\"}\n          {mainViewVisibility === MainViewVisibility.GRAPH_ONLY && \"Graph\"}\n          {mainViewVisibility === MainViewVisibility.STAGES_ONLY && \"Stages\"}\n        </span>\n        <select\n          id=\"main-view-visibility\"\n          value={mainViewVisibility}\n          onChange={handleViewChange}\n        >\n          <option value={MainViewVisibility.BOTH}>Graph and stages</option>\n          <option value={MainViewVisibility.GRAPH_ONLY}>Graph</option>\n          <option value={MainViewVisibility.STAGES_ONLY}>Stages</option>\n        </select>\n      </label>\n\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"stage-view-position\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <circle\n              cx=\"128\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <circle\n              cx=\"256\"\n              cy=\"416\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n              d=\"M256 256v112\"\n            />\n            <circle\n              cx=\"384\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M128 144c0 74.67 68.92 112 128 112M384 144c0 74.67-68.92 112-128 112\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n          </svg>\n        </div>\n        Graph position\n        <span>\n          {stageViewPosition === StageViewPosition.TOP ? \"Top\" : \"Left\"}\n        </span>\n        <select\n          id=\"stage-view-position\"\n          value={stageViewPosition}\n          onChange={handlePositionChange}\n          disabled={mainViewVisibility === MainViewVisibility.STAGES_ONLY}\n        >\n          <option value={StageViewPosition.TOP}>Top</option>\n          <option value={StageViewPosition.LEFT}>Left</option>\n        </select>\n      </label>\n      <div className=\"jenkins-dropdown__separator\" />\n    </>\n  );\n}\n\nfunction ViewIcon({\n  mainViewVisibility,\n  stageViewPosition,\n}: {\n  mainViewVisibility: MainViewVisibility;\n  stageViewPosition: StageViewPosition;\n}) {\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n          <line x1=\"184\" y1=\"180\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"left\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"150\" y1=\"100\" x2=\"150\" y2=\"420\" />\n          <line x1=\"280\" y1=\"100\" x2=\"280\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (\n    mainViewVisibility === \"stagesOnly\" ||\n    (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"left\")\n  ) {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"184\" y1=\"100\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import \"./filter.scss\";\n\nimport Tippy from \"@tippyjs/react\";\nimport { useState } from \"react\";\n\nimport { useFilter } from \"../../pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { classNames } from \"../utils/classnames.ts\";\nimport { DefaultDropdownProps } from \"./dropdown.tsx\";\nimport StatusIcon from \"./status-icon.tsx\";\nimport Tooltip from \"./tooltip.tsx\";\n\nexport default function Filter({ disabled }: FilterProps) {\n  const [visible, setVisible] = useState(false);\n  const { visibleStatuses, toggleStatus, resetStatuses, allVisible } =\n    useFilter();\n\n  const statuses = [\n    {\n      key: \"running\",\n      text: \"Running\",\n      status: Result.running,\n    },\n    {\n      key: \"success\",\n      text: \"Successful\",\n      status: Result.success,\n    },\n    {\n      key: \"failure\",\n      text: \"Failed\",\n      status: Result.failure,\n    },\n    {\n      key: \"unstable\",\n      text: \"Unstable\",\n      status: Result.unstable,\n    },\n    {\n      key: \"aborted\",\n      text: \"Aborted\",\n      status: Result.aborted,\n    },\n    {\n      key: \"skipped\",\n      text: \"Skipped\",\n      status: Result.skipped,\n    },\n    {\n      key: \"not_built\",\n      text: \"Not built\",\n      status: Result.not_built,\n    },\n  ];\n\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"Filter\"}>\n      <Tippy\n        {...DefaultDropdownProps}\n        visible={visible}\n        onClickOutside={hide}\n        placement=\"bottom\"\n        appendTo={document.body}\n        offset={[0, -1]}\n        content={\n          <div className=\"jenkins-dropdown\" data-testid=\"filter-dropdown\">\n            <div className=\"jenkins-dropdown__heading\">\n              Filter\n              {!allVisible && (\n                <button\n                  className={\n                    \"jenkins-button jenkins-button--tertiary jenkins-!-accent-color pgv-reset-button\"\n                  }\n                  onClick={resetStatuses}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n            {statuses.map((item, index) => (\n              <button\n                key={index}\n                className={classNames(\n                  \"jenkins-dropdown__item\",\n                  \"pgv-filter-button\",\n                  {\n                    \"pgv-filter-button--unchecked\": !visibleStatuses.includes(\n                      item.status,\n                    ),\n                  },\n                )}\n                onClick={() => toggleStatus(item.status)}\n              >\n                <div className=\"jenkins-dropdown__item__icon\">\n                  <StatusIcon\n                    status={item.status}\n                    skeleton={!visibleStatuses.includes(item.status)}\n                    percentage={0}\n                  />\n                </div>\n                {item.text}\n              </button>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={classNames(\n            \"jenkins-button\",\n            {\n              \"jenkins-button--tertiary\": allVisible,\n            },\n            {\n              \"jenkins-!-accent-color\": !allVisible,\n            },\n          )}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n          aria-label={\"Filter\"}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={!allVisible ? 42 : 36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\ninterface FilterProps {\n  disabled?: boolean;\n}\n","import \"./data-tree-view.scss\";\n\nimport {\n  memo,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport Filter from \"../../../common/components/filter.tsx\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  Result,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { useFilter } from \"./providers/filter-provider.tsx\";\n\nexport default function DataTreeView({\n  stages,\n  selected,\n  onNodeSelect,\n}: DataTreeViewProps) {\n  const { search, setSearch, visibleStatuses } = useFilter();\n  const filteredStages = filterStageTree(search, visibleStatuses, stages);\n\n  const handleSelect = useCallback(\n    (event: ReactMouseEvent, nodeId: string) => {\n      onNodeSelect(event, nodeId);\n    },\n    [onNodeSelect],\n  );\n\n  if (stages.length === 1 && stages[0].placeholder) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div className={\"pgw-filter-bar\"}>\n        <div className=\"jenkins-search\">\n          <div className=\"jenkins-search__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M221.09 64a157.09 157.09 0 10157.09 157.09A157.1 157.1 0 00221.09 64z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n              />\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n                d=\"M338.29 338.29L448 448\"\n              />\n            </svg>\n          </div>\n          <input\n            className=\"jenkins-input jenkins-search__input\"\n            placeholder=\"Search\"\n            type=\"search\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck=\"false\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <Filter />\n      </div>\n\n      {filteredStages.length === 0 && (\n        <div className={\"jenkins-notice\"}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n          <div>No stages</div>\n        </div>\n      )}\n\n      <ol className={\"pgv-tree\"} role=\"tree\" aria-label={\"Pipeline Stages\"}>\n        {filteredStages.map((stage) => (\n          <TreeNode\n            key={stage.id}\n            stage={stage}\n            selected={String(selected)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </ol>\n    </div>\n  );\n}\n\nconst TreeNode = memo(function TreeNode({\n  stage,\n  selected,\n  onSelect,\n}: TreeNodeProps) {\n  const { search, visibleStatuses, allVisible } = useFilter();\n  const hasChildren = stage.children && stage.children.length > 0;\n  const isSelected = String(stage.id) === selected;\n  const [isExpanded, setIsExpanded] = useState<boolean>(\n    hasSelectedDescendant(stage),\n  );\n\n  function hasSelectedDescendant(stage: StageInfo): boolean {\n    return stage.children?.some(\n      (child) => String(child.id) === selected || hasSelectedDescendant(child),\n    );\n  }\n\n  const handleToggleClick = (e: ReactMouseEvent) => {\n    e.stopPropagation();\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    if (hasSelectedDescendant(stage)) {\n      setIsExpanded(true);\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (search.length || !allVisible) {\n      if (filterStageTree(search, visibleStatuses, [stage]).length !== 0) {\n        setIsExpanded(true);\n      }\n    }\n  }, [search, visibleStatuses, allVisible]);\n\n  return (\n    <li\n      className=\"pgv-tree-stage\"\n      role={\"treeitem\"}\n      {...(hasChildren ? { \"aria-expanded\": isExpanded } : {})}\n      aria-selected={isSelected}\n      aria-labelledby={`stage-${stage.id}-name`}\n    >\n      <div className=\"pgv-tree-item-container\">\n        <a\n          href={`?selected-node=` + stage.id}\n          onClick={(e) => {\n            // Only prevent left clicks\n            if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n              return;\n            }\n\n            e.preventDefault();\n\n            history.replaceState({}, \"\", `?selected-node=` + stage.id);\n            if (!isSelected) {\n              onSelect(e, String(stage.id));\n            }\n            setIsExpanded(!isExpanded);\n          }}\n          className={classNames(\"pgv-tree-item\", {\n            \"pgv-tree-item--active\": isSelected,\n            \"pgv-tree-item--skeleton\": stage.skeleton,\n          })}\n          aria-labelledby={`stage-${stage.id}-name`}\n        >\n          <div className={\"pgv-tree-item__content\"}>\n            <div className=\"pgv-status-icon\">\n              <StatusIcon\n                status={stage.state}\n                percentage={stage.completePercent}\n                skeleton={stage.skeleton}\n              />\n            </div>\n            <div className={\"pgv-tree-item__info\"}>\n              <div\n                className=\"pgv-tree-item__name\"\n                id={`stage-${stage.id}-name`}\n              >\n                <span className={\"jenkins-visually-hidden\"}>Stage </span>\n                {stage.name}\n              </div>\n              <div className=\"pgv-tree-item__description\">\n                <Total ms={stage.totalDurationMillis} />\n              </div>\n            </div>\n          </div>\n        </a>\n        {hasChildren && (\n          <button\n            className={classNames(\"pgv-tree-item__toggle\", {\n              \"pgv-tree-item__toggle--active\": isExpanded,\n            })}\n            onClick={handleToggleClick}\n            aria-label={`${isExpanded ? \"Collapse\" : \"Expand\"} ${stage.name}`}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"pgv-tree-children\">\n          <ol\n            role={\"group\"}\n            aria-label={`Stages in ${stage.name}`}\n            className={\"pgv-tree\"}\n          >\n            {stage.children.map((child) => (\n              <TreeNode\n                key={child.id}\n                stage={child}\n                selected={selected}\n                onSelect={onSelect}\n              />\n            ))}\n          </ol>\n        </div>\n      )}\n    </li>\n  );\n});\n\nconst filterStageTree = (\n  search: string,\n  visibleStatuses: Result[],\n  stages: StageInfo[],\n): StageInfo[] => {\n  return stages\n    .map((stage) => {\n      const filteredChildren = stage.children\n        ? filterStageTree(search, visibleStatuses, stage.children)\n        : [];\n\n      const matchesSelf =\n        stage.name.toLowerCase().includes(search.toLowerCase()) &&\n        visibleStatuses.includes(stage.state);\n\n      // Include this stage if it matches or has matching children\n      if (matchesSelf || filteredChildren.length > 0) {\n        return {\n          ...stage,\n          children: filteredChildren,\n        };\n      }\n\n      return null;\n    })\n    .filter((stage) => stage !== null);\n};\n\ninterface DataTreeViewProps {\n  stages: StageInfo[];\n  selected?: number;\n  onNodeSelect: (event: ReactMouseEvent, nodeId: string) => void;\n}\n\ninterface TreeNodeProps {\n  stage: StageInfo;\n  selected: string;\n  onSelect: (event: ReactMouseEvent, id: string) => void;\n}\n","// re-export Result so the relative path exists in one location.\nexport * from \"../../../common/RestClient.tsx\";\nexport type {\n  StageInfo,\n  StageType,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nexport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nexport const LOG_FETCH_SIZE = 150 * 1024;\nexport const POLL_INTERVAL = 1000;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport useRunPoller from \"../../../../common/tree-api.ts\";\nimport {\n  getConsoleTextOffset,\n  getRunSteps,\n  LOG_FETCH_SIZE,\n  POLL_INTERVAL,\n  Result,\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../PipelineConsoleModel.tsx\";\n\nexport function useStepsPoller(props: RunPollerProps) {\n  const { run, loading } = useRunPoller({\n    currentRunPath: props.currentRunPath,\n    previousRunPath: props.previousRunPath,\n  });\n\n  const [openStage, setOpenStage] = useState(\"\");\n  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);\n  const [steps, setSteps] = useState<StepInfo[]>([]);\n  const [stepBuffers, setStepBuffers] = useState(\n    new Map<string, StepLogBufferInfo>(),\n  );\n  const [userManuallySetNode, setUserManuallySetNode] = useState(false);\n\n  const stepsRef = useRef<StepInfo[]>([]);\n\n  const updateStepConsoleOffset = useCallback(\n    async (stepId: string, forceUpdate: boolean, startByte: number) => {\n      const stepBuffer = stepBuffers.get(stepId) ?? {\n        lines: [],\n        startByte: 0 - LOG_FETCH_SIZE,\n        endByte: -1,\n        stepId,\n      };\n      if (stepBuffer.startByte > 0 && !forceUpdate) return;\n      const response = await getConsoleTextOffset(stepId, startByte);\n      if (!response) return;\n\n      const newLogLines = response.text.trim().split(\"\\n\") || [];\n\n      if (stepBuffer.endByte > 0 && stepBuffer.endByte <= startByte) {\n        stepBuffer.lines = [...stepBuffer.lines, ...newLogLines];\n      } else {\n        stepBuffer.lines = newLogLines;\n        stepBuffer.startByte = response.startByte;\n      }\n\n      stepBuffer.endByte = response.endByte;\n\n      setStepBuffers((prev) => new Map(prev).set(stepId, stepBuffer));\n    },\n    [],\n  );\n\n  const parseUrlParams = useCallback(\n    (steps: StepInfo[]): boolean => {\n      const params = new URLSearchParams(document.location.search.substring(1));\n      let selected = params.get(\"selected-node\");\n      if (!selected) {\n        return false;\n      }\n\n      setUserManuallySetNode(true);\n\n      const step = steps.find((s) => s.id === selected);\n      const expanded: string[] = [];\n\n      if (step) {\n        selected = step.stageId;\n        expanded.push(step.id);\n\n        updateStepConsoleOffset(\n          step.id,\n          false,\n          parseInt(params.get(\"start-byte\") || `${0 - LOG_FETCH_SIZE}`),\n        );\n      }\n\n      setOpenStage(selected);\n      setExpandedSteps(expanded);\n      return true;\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getDefaultSelectedStep = (steps: StepInfo[]) => {\n    if (userManuallySetNode) {\n      return;\n    }\n\n    let selectedStep = steps.find((step) => step !== undefined);\n    if (!steps || steps.length === 0 || !selectedStep) {\n      return null;\n    }\n    for (const step of steps) {\n      const stepResult = step.state.toLowerCase() as Result;\n      const selectedStepResult = selectedStep?.state.toLowerCase() as Result;\n      switch (stepResult) {\n        case Result.running:\n        case Result.queued:\n        case Result.paused:\n          // Return first running/queued/paused step.\n          return step;\n        case Result.unstable:\n        case Result.failure:\n        case Result.aborted:\n          if (selectedStepResult && stepResult < selectedStepResult) {\n            // Return first unstable/failed/aborted step which has a state worse than the selectedStep.\n            // E.g. if the first step state is failure we want to return that over a later unstable step.\n            return step;\n          }\n          continue;\n        default:\n          // Otherwise select the step with the worst result with the largest id - e.g. (last step if all successful).\n          if (selectedStepResult && stepResult <= selectedStepResult) {\n            selectedStep = step;\n          }\n      }\n    }\n    return selectedStep;\n  };\n\n  useEffect(() => {\n    getRunSteps()\n      .then((steps) => {\n        steps = steps || [];\n        setSteps(steps);\n\n        const usedUrl = parseUrlParams(steps);\n        if (!usedUrl) {\n          const defaultStep = getDefaultSelectedStep(steps);\n          if (defaultStep) {\n            setOpenStage(defaultStep.stageId);\n\n            if (defaultStep.stageId) {\n              setExpandedSteps((prev) => [...prev, defaultStep.id]);\n              updateStepConsoleOffset(\n                defaultStep.id,\n                false,\n                0 - LOG_FETCH_SIZE,\n              );\n            }\n          }\n        }\n\n        if (!run?.complete) {\n          startPollingPipeline({\n            getStateUpdateFn: getRunSteps,\n            onData: (data) => {\n              const hasNewSteps =\n                JSON.stringify(stepsRef.current) !== JSON.stringify(data);\n\n              if (userManuallySetNode) {\n                const defaultStep = getDefaultSelectedStep(steps);\n                if (defaultStep) {\n                  setOpenStage(defaultStep.stageId);\n\n                  if (defaultStep.stageId) {\n                    setExpandedSteps((prev) => [...prev, defaultStep.id]);\n                    updateStepConsoleOffset(\n                      defaultStep.id,\n                      false,\n                      0 - LOG_FETCH_SIZE,\n                    );\n                  }\n                }\n              }\n\n              if (hasNewSteps) {\n                setSteps(data);\n                stepsRef.current = data;\n              }\n            },\n            checkComplete: () => !run?.complete,\n            interval: POLL_INTERVAL,\n          });\n        }\n        return null;\n      })\n      .catch((error) => {\n        console.error(\"Error in getRunSteps:\", error);\n      });\n  }, [run?.stages]);\n\n  const handleStageSelect = useCallback(\n    (nodeId: string) => {\n      setUserManuallySetNode(true);\n\n      if (!nodeId) return;\n      if (nodeId === openStage) return; // skip if already selected\n\n      const stepsForStage = steps.filter((step) => step.stageId === nodeId);\n      const lastStep = stepsForStage[stepsForStage.length - 1];\n      const newlyExpandedSteps = lastStep ? [lastStep.id] : [];\n\n      history.replaceState({}, \"\", `?selected-node=` + nodeId);\n\n      setOpenStage(nodeId);\n      setExpandedSteps((prev) => [...prev, ...newlyExpandedSteps]);\n\n      if (lastStep) {\n        updateStepConsoleOffset(lastStep.id, false, 0 - LOG_FETCH_SIZE);\n      }\n    },\n    [openStage, steps, updateStepConsoleOffset],\n  );\n\n  const onStepToggle = (nodeId: string) => {\n    setUserManuallySetNode(true);\n    if (!expandedSteps.includes(nodeId)) {\n      setExpandedSteps((prev) => [...prev, nodeId]);\n      updateStepConsoleOffset(nodeId, false, 0 - LOG_FETCH_SIZE);\n    } else {\n      setExpandedSteps((prev) => prev.filter((id) => id !== nodeId));\n    }\n  };\n\n  const onMoreConsoleClick = (nodeId: string, startByte: number) => {\n    updateStepConsoleOffset(nodeId, true, startByte);\n  };\n\n  const getStageSteps = (stageId: string) => {\n    return steps.filter((step) => step.stageId === stageId);\n  };\n\n  const getStageStepBuffers = (stageId: string) => {\n    const buffers = new Map<string, StepLogBufferInfo>();\n    steps.forEach((step) => {\n      if (step.stageId === stageId && stepBuffers.has(step.id)) {\n        buffers.set(step.id, stepBuffers.get(step.id)!);\n      }\n    });\n    return buffers;\n  };\n\n  const getOpenStage = (): StageInfo | null => {\n    const findStage = (stages: StageInfo[]): StageInfo | null => {\n      for (const stage of stages) {\n        if (String(stage.id) === openStage) return stage;\n        if (stage.children.length > 0) {\n          const result = findStage(stage.children);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    return openStage ? findStage(run?.stages || []) : null;\n  };\n\n  return {\n    openStage: getOpenStage(),\n    openStageSteps: getStageSteps(openStage),\n    openStageStepBuffers: getStageStepBuffers(openStage),\n    expandedSteps,\n    stages: run?.stages || [],\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    loading,\n  };\n}\n\n/**\n * Starts polling a function until a complete condition is met.\n */\nconst startPollingPipeline = ({\n  getStateUpdateFn,\n  onData,\n  checkComplete,\n  interval = 1000,\n}: {\n  getStateUpdateFn: () => Promise<StepInfo[] | null>;\n  onData: (data: StepInfo[]) => void;\n  checkComplete: (data: StepInfo[]) => boolean;\n  interval?: number;\n}): (() => void) => {\n  let polling = true;\n\n  const poll = async () => {\n    while (polling) {\n      const data = (await getStateUpdateFn()) || [];\n      onData(data);\n\n      if (checkComplete(data)) {\n        polling = false;\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, interval));\n    }\n  };\n\n  setTimeout(poll, interval);\n\n  return () => {\n    polling = false;\n  };\n};\n\ninterface RunPollerProps {\n  currentRunPath: string;\n  previousRunPath?: string;\n}\n","import { lazy, useEffect, useState } from \"react\";\n\nimport {\n  getConsoleBuildOutput,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../../../common/RestClient.tsx\";\nimport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nasync function fetchData(): Promise<StepLogBufferInfo> {\n  const consoleBuildOutput = await getConsoleBuildOutput();\n\n  return {\n    lines: consoleBuildOutput?.split(\"\\n\") ?? [],\n    startByte: 0,\n    endByte: 0,\n  };\n}\n\nexport function NoStageStepsFallback() {\n  const step: StepInfo = {\n    id: \"step-1\",\n    name: \"Step 1\",\n    title: \"Step 1 Title\",\n    state: Result.success,\n    completePercent: 100,\n    type: \"STEP\",\n    startTimeMillis: 0,\n    totalDurationMillis: 0,\n    stageId: \"\",\n    pauseDurationMillis: 0,\n  };\n\n  const [logBuffer, setLogBuffer] = useState<StepLogBufferInfo>();\n\n  useEffect(() => {\n    fetchData()\n      .then((data) => {\n        setLogBuffer(data);\n        return data;\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div className={\"pgv-stage-steps\"}>\n      <div className={\"pgv-step-detail-group\"}>\n        <ConsoleLogStream\n          logBuffer={logBuffer ?? { lines: [], startByte: 0, endByte: 0 }}\n          onMoreConsoleClick={() => {}}\n          step={step}\n          maxHeightScale={0.65}\n        />\n      </div>\n    </div>\n  );\n}\n","import \"./scroll-to-top-bottom.scss\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\n\nexport default function ScrollToTopBottom() {\n  const [isAtTop, setIsAtTop] = useState(true);\n  const [isAtBottom, setIsAtBottom] = useState(false);\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  useEffect(() => {\n    const updateScrollState = () => {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const docHeight = document.documentElement.scrollHeight;\n\n      const atTop = scrollTop <= 10;\n      const atBottom = scrollTop + windowHeight >= docHeight - 10;\n      const scrollable = docHeight > windowHeight + 10;\n\n      setIsAtTop(atTop);\n      setIsAtBottom(atBottom);\n      setIsScrollable(scrollable);\n\n      // Distance from bottom\n      const distanceFromBottom = docHeight - (scrollTop + windowHeight);\n\n      // Only trigger the offset if we're within 20px from the bottom\n      const offset = Math.max(0, Math.min(100, 100 - distanceFromBottom));\n\n      const root = document.documentElement;\n      root.style.setProperty(\"--pgv-offset-bottom\", `${offset}px`);\n    };\n\n    updateScrollState();\n\n    window.addEventListener(\"scroll\", updateScrollState);\n    window.addEventListener(\"resize\", updateScrollState);\n\n    const observer = new MutationObserver(updateScrollState);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateScrollState);\n      window.removeEventListener(\"resize\", updateScrollState);\n      observer.disconnect();\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n    });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n    });\n  };\n\n  return (\n    <div\n      className={classNames(`pgv-scroll-to-top-bottom`, {\n        \"pgv-scroll-to-top-bottom--visible\": isScrollable,\n      })}\n      aria-hidden={!isScrollable}\n    >\n      <button\n        onClick={scrollToTop}\n        className=\"jenkins-button\"\n        disabled={isAtTop}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 244l144-144 144 144M256 120v292\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={scrollToBottom}\n        className=\"jenkins-button\"\n        disabled={isAtBottom}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 268l144 144 144-144M256 392V100\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n}\n","import \"./split-view.scss\";\n\nimport {\n  Children,\n  MouseEvent as ReactMouseEvent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\n\nexport default function SplitView(props: SplitViewNewProps) {\n  const {\n    setTreeViewWidth,\n    setStageViewWidth,\n    setStageViewHeight,\n    treeViewWidth,\n    stageViewWidth,\n    stageViewHeight,\n  } = useLayoutPreferences();\n\n  const { direction = \"horizontal\", storageKey } = props;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const isVertical = direction === \"vertical\";\n\n  const initialSize = (() => {\n    if (storageKey === \"stages\") return treeViewWidth;\n    if (storageKey === \"graph\") {\n      return isVertical ? stageViewHeight : stageViewWidth;\n    }\n    return 300; // fallback\n  })();\n\n  useEffect(() => {\n    const newSize = (() => {\n      if (storageKey === \"stages\") return treeViewWidth;\n      if (storageKey === \"graph\") {\n        return direction === \"vertical\" ? stageViewHeight : stageViewWidth;\n      }\n      return 300;\n    })();\n\n    setPanelSize(newSize);\n  }, [direction, treeViewWidth, stageViewWidth, stageViewHeight, storageKey]);\n\n  const [panelSize, setPanelSize] = useState<number>(initialSize);\n\n  const dividerRef = useRef<HTMLDivElement>(null);\n\n  const startDragging = (e: ReactMouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  };\n\n  const stopDragging = () => setIsDragging(false);\n\n  const handleDragging = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    // Dynamically follow mouse based on direction\n    const newSize =\n      direction === \"vertical\"\n        ? e.clientY - getContainerOffset()\n        : e.clientX - getContainerOffset();\n\n    const clampedSize = Math.max(\n      direction === \"vertical\" ? 100 : 200,\n      Math.min(newSize, 1500),\n    );\n    setPanelSize(clampedSize);\n\n    // Update context sizes\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(clampedSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(clampedSize);\n      } else {\n        setStageViewWidth(clampedSize);\n      }\n    }\n  };\n\n  const handleDoubleClick = () => {\n    const resetSize = (() => {\n      if (storageKey === \"stages\") return 300;\n      if (storageKey === \"graph\") return isVertical ? 250 : 600;\n      return 300;\n    })();\n\n    setPanelSize(resetSize);\n\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(resetSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(resetSize);\n      } else {\n        setStageViewWidth(resetSize);\n      }\n    }\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getContainerOffset = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      return direction === \"vertical\" ? rect.top : rect.left;\n    }\n    return 0;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleDragging);\n    window.addEventListener(\"mouseup\", stopDragging);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleDragging);\n      window.removeEventListener(\"mouseup\", stopDragging);\n    };\n  });\n\n  // If we only have one child, just return it\n  const childrenArray = Children.toArray(props.children).filter(Boolean);\n  if (childrenArray.length === 1) {\n    return <>{childrenArray[0]}</>;\n  }\n\n  const gridTemplate =\n    direction === \"vertical\" ? `${panelSize}px 1fr` : `${panelSize}px 1fr`;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"pgv-split-view__container\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns:\n          direction === \"vertical\" ? undefined : gridTemplate,\n        gridTemplateRows: direction === \"vertical\" ? gridTemplate : undefined,\n      }}\n    >\n      <div\n        className={classNames(\"pgv-split-view__side-panel\", {\n          \"pgv-split-view__side-panel--vertical\": direction === \"vertical\",\n        })}\n      >\n        {childrenArray[0]}\n        <div\n          ref={dividerRef}\n          onMouseDown={startDragging}\n          onDoubleClick={handleDoubleClick}\n          className={`pgv-split-view__divider ${\n            direction === \"vertical\" ? \"pgv-split-view__divider--vertical\" : \"\"\n          }`}\n        />\n      </div>\n      <div>{childrenArray[1]}</div>\n    </div>\n  );\n}\n\ninterface SplitViewNewProps {\n  children: ReactNode[];\n  direction?: \"horizontal\" | \"vertical\";\n  storageKey: \"stages\" | \"graph\";\n}\n"],"file":"assets/PipelineConsole-BeuvY6Zx.js"}